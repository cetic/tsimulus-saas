# This is the main configuration file for the backend part.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="Qjs1QF6LXAWUf3Tnw@87JqY<gsJbJ;q<S0jcInCcEj@iZ[EkPRZs2voAn]pKHgyE"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Akka
# ~~~~~

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  
  cluster {
  
    min-nr-of-members = 3 
	
	role {
      frontend.min-nr-of-members = 1
      backend.min-nr-of-members = 2
    }
	
	#seed nodes on kubernetes
    #seed-nodes = ["akka.tcp://application@akka-seed-0.akka-seed:2551","akka.tcp://application@akka-seed-1.akka-seed:2551"]
	 
    #seed nodes local on a single instance
    seed-nodes = ["akka.tcp://application@127.0.0.1:2551","akka.tcp://application@127.0.0.1:2552"]

    roles = [ backend ]
	auto-down-unreachable-after = 10s
  }
  
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      #hostname = ${?HOSTNAME}
      #bind-hostname = 0.0.0.0
      port = 2551
      #port = ${?PORT}
    }
  }
  
  discovery {
    method = kubernetes-api
    method = ${?DISCOVERY_METHOD}
    kubernetes-api {
      pod-namespace = "tsimulus-cluster" // in which namespace cluster is running
	  #pod-namespace = "default"
      pod-namespace = ${?K8S_NAMESPACE}
      pod-label-selector = "app=tsimulus-cluster-akka-backend" // selector - hot to find other cluster nodes
      pod-label-selector = ${?K8S_SELECTOR}
      pod-port-name = "management" // name of cluster management port
      pod-port-name = ${?K8S_MANAGEMENT_PORT}
    }
  }
  
  management {
    http {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      #bind-hostname = "0.0.0.0"
      port = 8558
      bind-port = 8558
    }
    cluster.bootstrap {
      contact-point-discovery {
        required-contact-point-nr = 2
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}
      }
    }
  }
}

# disable legacy metrics in akka-cluster, since it is still enabled in akka-cluster by default
akka.cluster.metrics.enabled=off
akka.extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=INFO

# Cluster Actors
# ~~~~~~~~~~~~~~

# disable legacy metrics in akka-cluster, since it is still enabled in akka-cluster by default
akka.cluster.metrics.enabled=off
akka.extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]

# Kafka
# ~~~~~~~~~~~~~~

# Kafka Brokers DC/OS
kafka.brokers="10.133.3.3:1027,10.133.3.4:1025,10.133.3.5:1025"

# Kafka Brokers Vagrant
#kafka.brokers="10.30.3.30:9092,10.30.3.20:9092,10.30.3.10:9092"

# ZooKeeper
zookeeper.connect="10.30.3.2:2181,10.30.3.3:2181,10.30.3.4:2181"